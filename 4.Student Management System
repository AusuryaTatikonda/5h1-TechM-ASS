package com.example.studentmanagement; 
import org.springframework.boot.SpringApplication; 
import org.springframework.boot.autoconfigure.SpringBootApplication; 
@SpringBootApplication 
public class StudentManagementApplication { 
public static void main(String[] args) { 
SpringApplication.run(StudentManagementApplication.class, args); 
} 
} 
// Student.java (Entity) 
package com.example.studentmanagement.model; 
import jakarta.persistence.*; 
import jakarta.validation.constraints.*; 
@Entity 
public class Student { 
@Id 
@GeneratedValue(strategy = GenerationType.IDENTITY) 
private Long studentId; 
@NotBlank(message = "Name is mandatory") 
private String name; 
@Min(value = 5, message = "Minimum age is 5") 
@Max(value = 100, message = "Maximum age is 100") 
private int age; 
@NotBlank(message = "Class is mandatory") 
private String studentClass; 
@Email(message = "Email should be valid") 
private String email; 
@NotBlank(message = "Address is mandatory") 
private String address; 
// Getters and Setters 
} 
// StudentRepository.java 
package com.example.studentmanagement.repository; 
import com.example.studentmanagement.model.Student; 
import org.springframework.data.domain.Page; 
import org.springframework.data.domain.Pageable; 
import org.springframework.data.jpa.repository.JpaRepository; 
public interface StudentRepository extends JpaRepository<Student, Long> { 
Page<Student> findByNameContainingIgnoreCase(String name, Pageable pageable); 
Page<Student> findByStudentClassContainingIgnoreCase(String studentClass, Pageable pageable); 
} 
// StudentService.java 
package com.example.studentmanagement.service; 
import com.example.studentmanagement.model.Student; 
import com.example.studentmanagement.repository.StudentRepository; 
import org.springframework.beans.factory.annotation.Autowired; 
import org.springframework.data.domain.*; 
import org.springframework.stereotype.Service; 
import java.util.Optional; 
 
@Service 
public class StudentService { 
    @Autowired 
    private StudentRepository studentRepository; 
 
    public Page<Student> getAllStudents(Pageable pageable) { 
        return studentRepository.findAll(pageable); 
    } 
 
    public Optional<Student> getStudentById(Long id) { 
        return studentRepository.findById(id); 
    } 
 
    public Student saveStudent(Student student) { 
        return studentRepository.save(student); 
    } 
 
    public void deleteStudent(Long id) { 
        studentRepository.deleteById(id); 
    } 
 
    public Page<Student> searchByName(String name, Pageable pageable) { 
        return studentRepository.findByNameContainingIgnoreCase(name, pageable); 
    } 
 
    public Page<Student> searchByClass(String studentClass, Pageable pageable) { 
        return studentRepository.findByStudentClassContainingIgnoreCase(studentClass, pageable); 
    } 
} 
 
// StudentController.java 
package com.example.studentmanagement.controller; 
 
import com.example.studentmanagement.model.Student; 
import com.example.studentmanagement.service.StudentService; 
import jakarta.validation.Valid; 
import org.springframework.beans.factory.annotation.Autowired; 
import org.springframework.data.domain.*; 
import org.springframework.stereotype.Controller; 
import org.springframework.ui.Model; 
import org.springframework.validation.BindingResult; 
import org.springframework.web.bind.annotation.*; 
 
@Controller 
@RequestMapping("/students") 
public class StudentController { 
 
    @Autowired 
    private StudentService studentService; 
 
    @GetMapping 
    public String listStudents(Model model, @RequestParam(defaultValue = "0") int page) { 
        Page<Student> students = studentService.getAllStudents(PageRequest.of(page, 5)); 
        model.addAttribute("students", students); 
        return "students"; 
    } 
 
    @GetMapping("/new") 
    public String showCreateForm(Model model) { 
        model.addAttribute("student", new Student()); 
        return "student-form"; 
    } 
 
    @PostMapping 
    public String saveStudent(@Valid @ModelAttribute Student student, BindingResult result) { 
        if (result.hasErrors()) return "student-form"; 
        studentService.saveStudent(student); 
        return "redirect:/students"; 
    } 
 
    @GetMapping("/edit/{id}") 
    public String showEditForm(@PathVariable Long id, Model model) { 
        Student student = studentService.getStudentById(id).orElseThrow(); 
        model.addAttribute("student", student); 
        return "student-form"; 
    } 
 
    @GetMapping("/delete/{id}") 
    public String deleteStudent(@PathVariable Long id) { 
        studentService.deleteStudent(id); 
        return "redirect:/students"; 
    } 
 
    @GetMapping("/search") 
    public String search(@RequestParam String keyword, Model model, @RequestParam(defaultValue = "0") int page) 
{ 
        Page<Student> students = studentService.searchByName(keyword, PageRequest.of(page, 5)); 
        model.addAttribute("students", students); 
        return "students"; 
    } 
} 
 
// application.properties 
spring.datasource.url=jdbc:h2:mem:testdb 
spring.datasource.driverClassName=org.h2.Driver 
spring.datasource.username=sa 
spring.datasource.password= 
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect 
spring.h2.console.enabled=true 
spring.jpa.show-sql=true 
 
// students.html (Thymeleaf) 
<!DOCTYPE html> 
<html xmlns:th="http://www.thymeleaf.org"> 
<head><title>Student List</title></head> 
<body> 
<h2>Student List</h2> 
<a href="/students/new">Add New</a> 
<form action="/students/search" method="get"> 
    <input type="text" name="keyword" placeholder="Search by name"/> 
    <button type="submit">Search</button> 
</form> 
<table border="1"> 
    <tr> 
        <th>Name</th><th>Age</th><th>Class</th><th>Email</th><th>Address</th><th>Actions</th> 
    </tr> 
    <tr th:each="student : ${students.content}"> 
        <td th:text="${student.name}"></td> 
        <td th:text="${student.age}"></td> 
        <td th:text="${student.studentClass}"></td> 
        <td th:text="${student.email}"></td> 
        <td th:text="${student.address}"></td> 
        <td> 
            <a th:href="@{/students/edit/{id}(id=${student.studentId})}">Edit</a> 
            <a th:href="@{/students/delete/{id}(id=${student.studentId})}">Delete</a> 
        </td> 
    </tr> 
</table> 
<div> 
    <a th:if="${students.hasPrevious()}" th:href="@{/students(page=${students.number - 1})}">Previous</a> 
    <span th:text="${students.number + 1}"></span> 
    <a th:if="${students.hasNext()}" th:href="@{/students(page=${students.number + 1})}">Next</a> 
</div> 
</body> 
</html> 
// student-form.html 
<!DOCTYPE html> 
<html xmlns:th="http://www.thymeleaf.org"> 
<head><title>Student Form</title></head> 
<body> 
<h2 th:text="${student.studentId == null ? 'Add' : 'Edit'} + ' Student'"></h2> 
<form th:action="@{/students}" th:object="${student}" method="post"> 
<input type="hidden" th:field="*{studentId}" /> 
<label>Name:</label><input type="text" th:field="*{name}" /><br/> 
<label>Age:</label><input type="number" th:field="*{age}" /><br/> 
<label>Class:</label><input type="text" th:field="*{studentClass}" /><br/> 
<label>Email:</label><input type="email" th:field="*{email}" /><br/> 
<label>Address:</label><input type="text" th:field="*{address}" /><br/> 
<button type="submit">Save</button> 
</form> 
</body> 
</html>
